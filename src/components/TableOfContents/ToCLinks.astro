---
import type { MarkdownHeading } from 'astro';

export type Props = {
    headings: MarkdownHeading[];
    depth?: number;
    maxDepth?: number;
};

const {
    headings,
    depth = 2,
    maxDepth = 3,
} = Astro.props;

const topLevel = headings.filter((heading) => heading.depth <= maxDepth && heading.depth === depth && !!heading.text);
const depthPadding = Math.round(((depth - 1) * .75) * 100) / 100;
---

<ul
    class="list-[circle] lg:list-none lg:list-unstyled mb-0 lg:text-[.81rem] ps-5 lg:ps-0 marker:text-wave-800 dark:marker:text-amber-300"
    style={`--toc-depth-padding: ${depthPadding}rem`}
>

    {topLevel.map((heading, i) => {
        const topLevelHeading = topLevel[i + 1];

        const sliceStart = headings.indexOf(heading) + 1;
        const sliceEnd = topLevelHeading ? headings.indexOf(topLevelHeading) : 0;

        const subHeadings = headings.slice(
            sliceStart,
            sliceEnd > 0 ? sliceEnd : undefined
        );

        const headingSlug = heading.slug.replace('h-', '');

        return (

            <li>

                <a
                    class="lg:block lg:py-[.125rem] lg:ps-(--toc-depth-padding) lg:opacity-75 hover:opacity-100 lg:hover:border-white lg:border-l lg:border-zinc-300 dark:lg:border-zinc-600 active:font-medium active:opacity-100 active:border-wave-800 active:dark:lg:border-yellow-500"
                    href={`#${headingSlug}`}
                >
                    {heading.text}
                </a>

                {subHeadings.length > 0 && (
                    <Astro.self
                        headings={subHeadings}
                        depth={heading.depth + 1}
                    />
                )}

            </li>

        );

    })}

</ul>
