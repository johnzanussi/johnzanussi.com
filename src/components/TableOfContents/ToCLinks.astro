---
import type { MarkdownHeading } from 'astro';

export type Props = {
    headings: MarkdownHeading[];
    depth?: number;
};

const {
    headings,
    depth = 2,
} = Astro.props;

const topLevel = headings.filter((heading) => heading.depth === depth);
---

<ul
    class="list-unstyled mb-0 text-[.81rem]"
    style={`--toc-depth-padding: ${Math.round(((depth - 1) * 1.5) * 100) / 100}rem`}
>

    {topLevel.map((heading, i) => {
        const topLevelHeading = topLevel[i + 1];

        const sliceStart = headings.indexOf(heading) + 1;
        const sliceEnd = topLevelHeading ? headings.indexOf(topLevelHeading) : 0;

        const subHeadings = headings.slice(
            sliceStart,
            sliceEnd > 0 ? sliceEnd : undefined
        );

        return (

            <li>

                <a
                    class="block py-[.125rem] px-(--toc-depth-padding) opacity-75 hover:opacity-100 2xl:border-l 2xl:border-zinc-300 dark:2xl:border-zinc-600 active:font-medium active:opacity-100 active:border-wave-800 active:dark:2xl:border-dune-400"
                    href={`#${heading.slug.replace('h-', '')}`}
                >
                    {heading.text}
                </a>

                {subHeadings.length > 0 && (
                    <Astro.self
                        headings={subHeadings}
                        depth={heading.depth + 1}
                    />
                )}

            </li>

        );

    })}

</ul>
