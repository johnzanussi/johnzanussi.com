---
import type {
    ImageComponentLocalImageProps,
    ImageComponentRemoteImageProps,
} from '@astrojs/image/components';

interface LocalImage extends Omit<ImageComponentLocalImageProps, 'src'> {
    src: string;
}
interface HasWidth extends LocalImage {
    width: number;
    height: number;
    widths?: never;
}

interface HasWidths extends LocalImage {
    widths: number[];
    width?: never;
    height?: never;
}

export type Props = HasWidth | HasWidths | ImageComponentRemoteImageProps;

import { getImage } from '@astrojs/image';
import { loadImage } from '@utils/images';

const {
    src,
    loading = 'lazy',
    decoding = 'async',
    format = 'webp',
    widths,
    aspectRatio,
    ...props
} = Astro.props;

const image = await loadImage(src);

interface ResponsiveAttrs extends Partial<ImageComponentRemoteImageProps> {
    srcset?: string;
}

const responsiveAttrs: ResponsiveAttrs = {};

if (image && widths) {

    const srcset = await Promise.all(widths.map(async (width: number) => {

        const { src } = await getImage({
            src: image,
            width,
            aspectRatio,
            format,
            alt: '',
        });

        if (src) {
            return `${decodeURI(src)} ${width}w`;
        }

        return '';

    }));

    responsiveAttrs.srcset = srcset.join(', ');
    responsiveAttrs.aspectRatio = aspectRatio;

}

const attrs = await getImage({
    src: image,
    format,
    ...props
});

const imgProps = {
    ...attrs,
    loading,
    decoding,
    ...props,
    ...responsiveAttrs
};

---
{image !== null && (
    <img {...imgProps} />
)}